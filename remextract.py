from lxml.etree import XMLParser
import lxml.etree as ETH
import csv
import argparse
import sys
import datetime

def parser_manual(xmlfile):

    #initiation
    t = datetime.datetime.now()
    ts = t.strftime("%Y%m%d%H%M%S")
    searchString = "<String name=\"remediation\">"
    parser = XMLParser(recover=True)
    n = 0

    fptr = open(xmlfile, 'r', encoding='utf-8')
    xmltostring = fptr.readlines()

    with open("remediation_"+ts+".csv", "w") as csvfile:
        writer = csv.writer(csvfile, delimiter=',')
        for line in xmltostring:
            print(n, end="\r")
            if searchString.lower() in line.lower():
                try:
                    element = ETH.fromstring(line.strip(), parser=parser)
                except Exception as e:
                    print("\nError: Possible XML syntax error while parsing: ", line.strip())
                    sys.exit(1)
                rem = ""
                for text in element.itertext():
                    rem += "\n" + text
                writer.writerow([n+1, rem])
                n += 1
        print("Success! Output saved to", "remediation_"+ts+".csv\n")

def is_legal(xmlfile):

    try:
        with open(xmlfile, 'rb') as fptr:
            xmltostring = fptr.read()

    except FileNotFoundError:
        print("\nError: File not found:", xmlfile)
        sys.exit(1)

    except PermissionError:
        print("\nError: Permission denied:", xmlfile)
        sys.exit(1)

    except IsADirectoryError:
        print("\nError: "+str(xmlfile)+" is a directory, not a file.")
        sys.exit(1)

    except OSError as e:
        print(f"\nError: An I/O error occurred: {e}")
        sys.exit(1)

    try:
        ETH.fromstring(xmltostring) 
        return True
    except ETH.XMLSyntaxError:
        print("\nWarning: XML is not well-formed, proceeding anyway.\n")
        return False

if __name__ == "__main__":

    parser = argparse.ArgumentParser(prog="Remediation Column Extractor", description="Script to extract remediation values from XML report generated by Tripwire and write it to a CSV file.", epilog="lightflix")
    parser.add_argument('-r', '--report', required=True)
    args = parser.parse_args()
    is_legal(args.report)
    parser_manual(args.report)


